import 'dart:async';
import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:iconsax_flutter/iconsax_flutter.dart';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server/gmail.dart';
import 'package:url_launcher/url_launcher.dart';

class MapPageUser extends StatefulWidget {
  final String email;

  const MapPageUser({Key? key, required this.email}) : super(key: key);

  @override
  State<MapPageUser> createState() => _MapPageUserState();
}

class _MapPageUserState extends State<MapPageUser> {
  Completer<GoogleMapController> _controller = Completer();

  void _showHistoryPopup4(BuildContext context) async {
    // Replace these values with the desired coordinates
    double targetLatitude = 11.021034681307452;
    double targetLongitude = 76.96585703697029;
    double zoomLevel = 12.0;

    // Wait for the GoogleMapController to be initialized
    GoogleMapController controller = await _controller.future;

    // Move the camera to the specified coordinates and zoom level
    controller.animateCamera(
      CameraUpdate.newLatLngZoom(
        LatLng(targetLatitude, targetLongitude),
        zoomLevel,
      ),
    );

    // Additional actions or UI updates can be added here
    // ...
  }

  String mapTheme = "";
  late BitmapDescriptor markerIcon1;

  late BitmapDescriptor markerIcon2;

  List<LatLng> peelamedu = const [
    LatLng(11.020260453892645, 76.96413330301858),
    LatLng(11.056246895684264, 76.97106207583438),
    LatLng(11.107243733306012, 76.99069359881247),
    LatLng(11.085712819709578, 77.05247515642),
    LatLng(11.056530235989008, 77.03313233230924),
    LatLng(11.006658131943142, 77.06921969072485),
    LatLng(10.99588918156393, 77.01927478667764)
  ];

  List<LatLng> sabariGarden = const [
    LatLng(11.0181527794094, 76.95294694199826),
    LatLng(11.05719271010531, 76.96267991909573),
    LatLng(11.10758540628997, 76.97682799283031),
    LatLng(11.103460189107157, 76.9682946699914),
    LatLng(11.10909977922588, 76.92881372114631),
    LatLng(11.070846511443227, 76.9095730055699),
    LatLng(11.026074901760454, 76.87316987376826),
    LatLng(11.015350023565594, 76.88535699101239)
  ];

  List<LatLng> ghandipark = const [
    LatLng(11.010479337867539, 76.95373779654031),
    LatLng(10.98696534930167, 76.89532368285303),
    LatLng(10.977476717886635, 76.89868564623072),
    LatLng(10.970050619796318, 76.87010895752039),
    LatLng(10.943645205294237, 76.88313656560891),
    LatLng(10.936218258233714, 76.91885742649683),
    LatLng(10.918887991866967, 76.97601080391749),
    LatLng(10.965434797152689, 77.03136323823921),
    LatLng(11.000112155404025, 76.9971162740542)
  ];

  List<LatLng> polyline1 = const [
    LatLng(11.032124056025587, 76.99865509563396),
    LatLng(11.033932307001935, 77.0032441626861),
    LatLng(11.03463359129299, 77.00446900824694),
    LatLng(11.040462470173697, 77.00371953400908),
    LatLng(11.038954404187153, 76.9966730294651),
    LatLng(11.046834802656523, 76.98809397905218),
    LatLng(11.048879378717878, 76.98954238968145),
    LatLng(11.051287617696326, 76.99143006881627),
    LatLng(11.052078456633899, 76.99323894716748),
    LatLng(11.061119051197132, 76.9981592993927),
    LatLng(11.062445806530258, 76.99959695943681),
    LatLng(11.065383499210562, 77.0006806078961),
    LatLng(11.06760785636772, 77.00178660961457),
    LatLng(11.070437070134638, 77.00247697498966),
    LatLng(11.071110962078158, 77.00204027364711),
    LatLng(11.074427631286387, 77.00200808715596),
    LatLng(11.076975650040184, 77.00249088478097),
    LatLng(11.08016828102095, 77.00464293728945),
    LatLng(11.085700913566539, 77.0065952721979),
    LatLng(11.09070589987758, 77.00837779415752),
    LatLng(11.095743775775642, 77.01748182772262),
  ];

  List<LatLng> polyline2 = [
    LatLng(11.034639006464781, 77.00447587737192),
    LatLng(11.037145869356236, 77.00811755010801),
    LatLng(11.037214313941131, 77.0082760483401),
    LatLng(11.038347747030203, 77.01359893382894),
    LatLng(11.038701943971192, 77.01453720517077),
    LatLng(11.042127504530601, 77.01413614017925),
    LatLng(11.043585931094231, 77.01410292363325),
    LatLng(11.04527690490737, 77.0138466656702),
    LatLng(11.047465992069306, 77.01364941841753),
    LatLng(11.050414532590901, 77.01419564157277),
    LatLng(11.051829225889652, 77.01457496320755),
    LatLng(11.05666891443674, 77.01499980343901),
    LatLng(11.059766273119385, 77.01516670495992),
    LatLng(11.064784520471793, 77.0156067180607),
    LatLng(11.066109799943835, 77.01581913817746),
    LatLng(11.067057439798859, 77.01642527923929),
    LatLng(11.06811784764695, 77.01701741472866),
    LatLng(11.069286195600245, 77.01690113812055),
    LatLng(11.070932760306373, 77.01691389692806),
    LatLng(11.071091126725205, 77.01710511741324),
    LatLng(11.072780874697166, 77.01700220394768),
    LatLng(11.076439757878601, 77.01632019560462),
    LatLng(11.07708675074453, 77.01622926115863),
    LatLng(11.080973457839514, 77.01617490798127),
    LatLng(11.085989990581188, 77.01660893543443),
    LatLng(11.088742208887467, 77.01714672284072),
    LatLng(11.089781417472798, 77.01746569304842),
    LatLng(11.090839403090124, 77.01798880418131),
    LatLng(11.093646418403049, 77.01872488102701),
    LatLng(11.094398944341144, 77.01893238334276),
    LatLng(11.09539050495331, 77.0189865143812),
    LatLng(11.096691923178774, 77.01931130061324),
  ];

  List<LatLng> polyline3 = [
    LatLng(11.046866445220749, 76.98806714730075),
    LatLng(11.045599802496797, 76.98600286411587),
    LatLng(11.04424178757469, 76.98538068872637),
    LatLng(11.042619452780267, 76.98408990695117),
    LatLng(11.0401590449574, 76.9815822161903),
    LatLng(11.039293181209015, 76.9804864446186),
    LatLng(11.038780310797199, 76.97949733751888),
    LatLng(11.036970210382297, 76.978768485332),
    LatLng(11.036271096764025, 76.97831571352322),
    LatLng(11.036211482343553, 76.97815558690743),
    LatLng(11.036075994989753, 76.97807276279623),
    LatLng(11.0347063990166, 76.97840587803472),
    LatLng(11.033934137354185, 76.97845907499376),
    LatLng(11.0330182545803, 76.97808733979161),
    LatLng(11.03245978806348, 76.97766249955751),
    LatLng(11.03176728810672, 76.97686592412082),
    LatLng(11.030546101422784, 76.97559898985585),
    LatLng(11.03006209309447, 76.97537139687248),
    LatLng(11.02870871222196, 76.97487366027478),
    LatLng(11.027800259495455, 76.97424398635808),
    LatLng(11.025611025801282, 76.97350051594783),
    LatLng(11.025611025801282, 76.97350051594783),
    LatLng(11.02093847992024, 76.97110899473184),
    LatLng(11.020039025598889, 76.96642738402657),
  ];

  List<LatLng> polyline4 = [
    LatLng(11.038695685838862, 77.01459919616464),
    LatLng(11.038390396846351, 77.01480402984745),
    LatLng(11.038181906620352, 77.0147205790878),
    LatLng(11.0355646725767, 77.01566744155328),
    LatLng(11.03387439200829, 77.01614538681319),
    LatLng(11.03168340767326, 77.01662251561893),
    LatLng(11.030629391722416, 77.01679938791005),
    LatLng(11.030033280468071, 77.01727464666413),
    LatLng(11.02985174923133, 77.01754079093901),
    LatLng(11.02906363670776, 77.01848808411506),
    LatLng(11.02825781160316, 77.01956168304675),
    LatLng(11.02706519029364, 77.02119387461947),
    LatLng(11.027914074550852, 77.0234091130019),
    LatLng(11.027631113406276, 77.02353049592506),
    LatLng(11.030118183637361, 77.02753613239723),
    LatLng(11.034005119545611, 77.03264938805702),
    LatLng(11.03710271748056, 77.03624535716482),
    LatLng(11.039547406499253, 77.03937136127232),
    LatLng(11.040877574543611, 77.04118981465943),
  ];

  List<LatLng> polyline5 = [
    LatLng(11.078575669150105, 77.00368141921379),
    LatLng(11.079439037638144, 77.00250124725265),
    LatLng(11.080218172867328, 77.00252270492467),
    LatLng(11.080786729718568, 77.00220083983818),
    LatLng(11.08343998036281, 77.00026964934824),
    LatLng(11.086051092391633, 76.99844574722046),
    LatLng(11.086116805371427, 76.99777908074249),
    LatLng(11.087350214704122, 76.99752481132292),
    LatLng(11.089333380434114, 76.9974706802881),
    LatLng(11.09264452891423, 76.9973082871737),
    LatLng(11.093912270341558, 76.99703312106207),
    LatLng(11.094306239679591, 76.99673088943074),
    LatLng(11.096980777716636, 76.99620540009445),
    LatLng(11.101595017730352, 76.99639607677264),
    LatLng(11.102354352701674, 76.99665401548609),
    LatLng(11.10361990658834, 76.99674505268067),
    LatLng(11.10537678407615, 76.99682091700964),
  ];

  List<LatLng> polyline6 = [
    LatLng(11.07948700413643, 77.00246168582458),
    LatLng(11.079688065005625, 76.99996300395615),
    LatLng(11.079989089992567, 76.99741884513082),
    LatLng(11.080909870353882, 76.99288988156667),
    LatLng(11.081653575447245, 76.98885711918133),
    LatLng(11.082237913851374, 76.98750384320853),
    LatLng(11.082751422401794, 76.98583480284206),
    LatLng(11.083326905023037, 76.98173888759632),
    LatLng(11.083354982016933, 76.9812362869983),
  ];

  List<LatLng> polyline7 = [
    LatLng(11.04445837565233, 76.98545068946919),
    LatLng(11.047698509203109, 76.98535564908876),
    LatLng(11.04996459360189, 76.98501134221688),
    LatLng(11.04996459360189, 76.98381639484471),
    LatLng(11.054300073130474, 76.98334782878584),
    LatLng(11.056533906587397, 76.98303471829593),
    LatLng(11.060540581135834, 76.98248075358023),
    LatLng(11.061048798472092, 76.98267343695949),
    LatLng(11.061379730211888, 76.98299859016083),
    LatLng(11.063518958527661, 76.98356459758541),
    LatLng(11.062719863154907, 76.98041452536538),
    LatLng(11.062924956005894, 76.98004479827928),
    LatLng(11.062985081695036, 76.97955192385596),
    LatLng(11.062562950683255, 76.97951369063149),
    LatLng(11.062497285802047, 76.97838581050232),
    LatLng(11.062459763007615, 76.97812773623714),
    LatLng(11.062394098105774, 76.97699029780921),
    LatLng(11.06254418928834, 76.97560301117917),
    LatLng(11.062675519011682, 76.97339504245664),
  ];

  List<LatLng> polyline8 = [
    LatLng(11.027943862330774, 77.02424809859643),
    LatLng(11.026525419294865, 77.02115312189194),
    LatLng(11.02567435016124, 77.0165166781741),
    LatLng(11.025390659898347, 77.01284365132639),
    LatLng(11.024563228421997, 77.00735217512802),
    LatLng(11.024066768414592, 77.00485933394573),
    LatLng(11.023723974110597, 77.00275185952798),
    LatLng(11.023440281979292, 77.00205338229493),
    LatLng(11.022447357347719, 76.99992182245254),
    LatLng(11.02225822845835, 76.99812745852117),
    LatLng(11.022033637750372, 76.99657394880151),
    LatLng(11.021714482243192, 76.99536967770385),
    LatLng(11.021076170189364, 76.99359939918915),
    LatLng(11.02021326466719, 76.99217835929757),
    LatLng(11.01897222913597, 76.99137369383568),
    LatLng(11.016962035550051, 76.98999885118558),
    LatLng(11.015782451198872, 76.98921127324859),
    LatLng(11.014770316526457, 76.988137177436),
    LatLng(11.012985014915452, 76.98604627091628),
    LatLng(11.011986928181521, 76.98455685804805),
    LatLng(11.012985014915452, 76.98604627091628),
    LatLng(11.015051465373368, 76.98429907505565),
    LatLng(11.014643799434431, 76.98325362179129),
    LatLng(11.013800350853069, 76.97907180876102),
    LatLng(11.01552524088332, 76.9787367518571),
    LatLng(11.016060190057678, 76.97862605058394),
    LatLng(11.0163360228458, 76.97828543128195),
    LatLng(11.01659513828301, 76.97780856425099),
    LatLng(11.016845894918008, 76.9773146662631),
    LatLng(11.01357633078403, 76.97645838626272),
  ];

  List<LatLng> polyline9 = [
    LatLng(11.026424351187327, 77.02090786290444),
    LatLng(11.024101975658617, 77.02160284003082),
    LatLng(11.022829647857657, 77.02194957688515),
    LatLng(11.021641621769156, 77.02216822137463),
    LatLng(11.020982456829676, 77.022300969814),
    LatLng(11.01967178724967, 77.02262112781587),
    LatLng(11.01887465200216, 77.0227929199152),
    LatLng(11.017159038912116, 77.02333452353152),
    LatLng(11.016499863938343, 77.02352193309392),
    LatLng(11.015426785241708, 77.02356097675273),
    LatLng(11.01482892539065, 77.02358440294724),
    LatLng(11.014247221381453, 77.02360782914242),
    LatLng(11.013746126358201, 77.02371787956616),
    LatLng(11.013335943852471, 77.02388503115566),
    LatLng(11.012784475356536, 77.02411718614098),
    LatLng(11.011439981746907, 77.02441898762153),
    LatLng(11.010460092688108, 77.02469293050518),
    LatLng(11.008649560353016, 77.02531927738656),
    LatLng(11.00812598032478, 77.02551391739588),
    LatLng(11.006790580818908, 77.02602930146254),
    LatLng(11.005722248145537, 77.02649681943345),
    LatLng(11.004323029589436, 77.02736972217622),
    LatLng(11.002181060532928, 77.02865968333299),
    LatLng(11.000704342878592, 77.02956044467457),
  ];

  List<LatLng> polyline10 = [
    LatLng(11.047451911467633, 76.92918766657125),
    LatLng(11.0473055674047, 76.92802687192388),
    LatLng(11.04609794304113, 76.9284126554555),
    LatLng(11.045960196279475, 76.9283488614149),
    LatLng(11.045183804232039, 76.92654349006604),
    LatLng(11.045048531902708, 76.92621805945176),
    LatLng(11.043777497967742, 76.92586719222847),
    LatLng(11.043827588079209, 76.92564391308639),
    LatLng(11.043726004630557, 76.92483831037329),
    LatLng(11.043431725001529, 76.92376657049127),
    LatLng(11.043801139807723, 76.9236389824101),
    LatLng(11.044533706777198, 76.9230839742569),
    LatLng(11.046706351933976, 76.92142532919235),
    LatLng(11.047881755181736, 76.92056208566865),
    LatLng(11.049530225533056, 76.9194030980249),
    LatLng(11.051470664015353, 76.91808296770976),
    LatLng(11.053179942445285, 76.91682481535172),
    LatLng(11.054761472346831, 76.91574020124712),
    LatLng(11.057176330368073, 76.91398002750233),
    LatLng(11.058836913911193, 76.91283963324138),
    LatLng(11.060661720123244, 76.91151950293313),
    LatLng(11.062249292278471, 76.91037910867645),
    LatLng(11.062818413577597, 76.91003802283781),
    LatLng(11.063888953371194, 76.90921371612248),
    LatLng(11.064570203940935, 76.90870549694166),
    LatLng(11.065038562788818, 76.90842659617135),
    LatLng(11.065257535496515, 76.90819727776183),
    LatLng(11.065500838313127, 76.90745974017445),
  ];

  List<LatLng> polyline11 = [
    LatLng(11.043434063172754, 76.92378335122018),
    LatLng(11.042777975540433, 76.92397920731885),
    LatLng(11.041956979282926, 76.92433340476798),
    LatLng(11.041087762947155, 76.92471234374183),
    LatLng(11.040473459450425, 76.9249933546683),
    LatLng(11.03981847029215, 76.92531964018703),
    LatLng(11.039191627280795, 76.92592849719071),
    LatLng(11.038046031007225, 76.92658321617654),
    LatLng(11.037149938111371, 76.92713816568207),
    LatLng(11.035877327894688, 76.92785538289141),
    LatLng(11.034737888025628, 76.92857307407012),
    LatLng(11.03332520679154, 76.92942877040319),
    LatLng(11.031955352682608, 76.93030809121292),
    LatLng(11.030957330316882, 76.93095970934246),
    LatLng(11.029889020935272, 76.93169725513741),
    LatLng(11.028799622484852, 76.93247060412853),
    LatLng(11.026916007930948, 76.93363778824938),
    LatLng(11.025325364764116, 76.93473195989151),
    LatLng(11.023448756490042, 76.93597791103689),
    LatLng(11.022092249377982, 76.93693027599865),
    LatLng(11.017269225654266, 76.9400549625294),
  ];

  List<LatLng> polyline12 = [
    LatLng(11.01913270999538, 76.95328696042324),
    LatLng(11.021253053209477, 76.95242671287271),
    LatLng(11.022078669442234, 76.9519679141791),
    LatLng(11.024330338347266, 76.95145176564546),
    LatLng(11.026206715937132, 76.95126059952051),
    LatLng(11.029527874880431, 76.9511267832321),
    LatLng(11.032248570367926, 76.950801800822),
    LatLng(11.035344503562364, 76.9506488679211),
    LatLng(11.036845550340962, 76.95051505163329),
    LatLng(11.038177722929628, 76.94992243665159),
    LatLng(11.040354217252622, 76.94906218909713),
    LatLng(11.044838495186598, 76.94743727705381),
    LatLng(11.047795815385124, 76.94699249420785),
    LatLng(11.051497033262919, 76.94625270334731),
    LatLng(11.055162786759336, 76.94569334928205),
    LatLng(11.057408375495603, 76.9454604319267),
    LatLng(11.059710498425817, 76.94479281578586),
    LatLng(11.063748024267987, 76.9437462823714),
    LatLng(11.068175072021075, 76.94295236046804),
    LatLng(11.071663538510128, 76.94228474432225),
    LatLng(11.074992594703211, 76.94194191440714),
    LatLng(11.07913615425702, 76.94154495345788),
    LatLng(11.080145474018583, 76.94150886609718),
    LatLng(11.08166830067159, 76.94118407986652),
    LatLng(11.082878933520716, 76.94076560252164),
    LatLng(11.083689645761407, 76.93985365145419),
    LatLng(11.084089736676075, 76.93940304034176),
    LatLng(11.0843213680081, 76.93918846362155),
    LatLng(11.085490050586342, 76.93864129298053),
    LatLng(11.088364358150447, 76.93859837763574),
    LatLng(11.090954369327056, 76.93852327578377),
    LatLng(11.093144279570883, 76.93845890276717),
    LatLng(11.095671078684088, 76.93842671625951),
    LatLng(11.098797962342768, 76.9386734794874),
    LatLng(11.099482292698454, 76.93868420832327),
    LatLng(11.102430158904532, 76.93831942789862),
    LatLng(11.107356862643107, 76.93734236069336)
  ];

  List<LatLng> polyline13 = [
    LatLng(11.04495683163526, 76.94732957968002),
    LatLng(11.044655284937177, 76.94600451189517),
    LatLng(11.04480144185832, 76.94428371471865),
    LatLng(11.04493135906046, 76.94320821648333),
    LatLng(11.044833921164246, 76.94276147106248),
    LatLng(11.044151854985083, 76.94072629747872),
    LatLng(11.043632184405276, 76.94059392845625),
    LatLng(11.043339594930892, 76.93998653473972),
    LatLng(11.043134542958597, 76.93990157259232),
    LatLng(11.04283377257277, 76.93914474731187),
    LatLng(11.042318816499828, 76.93900081121559),
    LatLng(11.041503087750982, 76.93843435302308),
    LatLng(11.04036379802927, 76.93761252434432),
    LatLng(11.039857951957314, 76.93591779287921),
    LatLng(11.039661993339193, 76.93549991388824),
    LatLng(11.039661993340657, 76.93392125992263),
    LatLng(11.039844280433304, 76.93364731702505),
    LatLng(11.039848837610293, 76.93329444143218),
    LatLng(11.039620978732257, 76.93222188535637),
    LatLng(11.039534392312289, 76.93140005667394),
    LatLng(11.039520720769998, 76.93010927490445),
    LatLng(11.03964376462784, 76.92817310224353),
    LatLng(11.039470591778752, 76.92687767736781),
    LatLng(11.03927919008968, 76.9260929934881),
    LatLng(11.039178932012282, 76.92590726949288),
    LatLng(11.038554193255166, 76.92551131577362),
    LatLng(11.038495026955802, 76.92537065872999),
    LatLng(11.038309639134912, 76.92447849119173),
    LatLng(11.03773769725879, 76.92307593952455),
    LatLng(11.037323531751161, 76.92213956548552),
    LatLng(11.03628614320797, 76.91990914664065),
    LatLng(11.036187531935772, 76.91931838705158),
    LatLng(11.0360455316497, 76.91893258487312),
    LatLng(11.03600608711278, 76.9182694873782),
    LatLng(11.035572196876917, 76.91640477685705),
    LatLng(11.034700469993057, 76.91430295873275),
    LatLng(11.033903685690952, 76.91242217311456),
    LatLng(11.033599960406876, 76.91181131966239),
    LatLng(11.03252311372268, 76.91089905826145),
    LatLng(11.031489652746254, 76.90997474054234),
    LatLng(11.030215571816811, 76.90764787115837),
    LatLng(11.030002567020812, 76.90698879242903),
    LatLng(11.02875609149908, 76.90629756352618),
    LatLng(11.027825175933785, 76.90600821189011),
    LatLng(11.027194045083613, 76.90600821189011),
    LatLng(11.026527945208368, 76.90597563618249),
    LatLng(11.027230832838766, 76.90505492492551),
    LatLng(11.027571119110643, 76.90416263067655),
    LatLng(11.028179170646888, 76.90325328622092),
    LatLng(11.02832421027898, 76.90217912308229),
    LatLng(11.028452514507924, 76.90022971590918),
    LatLng(11.028340945615701, 76.89884296561321),
    LatLng(11.028469249834863, 76.89734254726267),
    LatLng(11.02866449528185, 76.89633658495725),
    LatLng(11.029110770101045, 76.89479069938358),
    LatLng(11.030350538467601, 76.89185501896816),
    LatLng(11.03074499117225, 76.8906654622564),
    LatLng(11.031865233993557, 76.88827027372682),
    LatLng(11.032259684688976, 76.88767549535848),
    LatLng(11.03402681719922, 76.88582685992803),
    LatLng(11.035225936778618, 76.88476590394187),
    LatLng(11.036014828589735, 76.88333522086387),
  ];

  List<LatLng> polyline14 = [
    LatLng(11.052217000850263, 76.91752796785617),
    LatLng(11.054324390247416, 76.91801786796479),
    LatLng(11.055889577422391, 76.91885174048679),
    LatLng(11.057717818889634, 76.92126600198482),
    LatLng(11.058362301284223, 76.92233961285785),
    LatLng(11.059886547652974, 76.92337153010912),
    LatLng(11.062208706442302, 76.92432006011283),
    LatLng(11.06312938103687, 76.92520604966907),
    LatLng(11.063323745299769, 76.92545621142547),
    LatLng(11.063569257868638, 76.92625881372724),
    LatLng(11.062965705758055, 76.92848942274085),
    LatLng(11.062484909127422, 76.9304073295399),
    LatLng(11.062607665788947, 76.93103273393089),
    LatLng(11.062495138851178, 76.93138712975245),
    LatLng(11.06223939563899, 76.93220015547075),
    LatLng(11.061932503497562, 76.93311741524978),
    LatLng(11.061819976297432, 76.93425356656708),
    LatLng(11.061431245648023, 76.93579623073153),
    LatLng(11.060694601473571, 76.93775502811079),
    LatLng(11.060203571313764, 76.93871398151032),
    LatLng(11.059876217409608, 76.94041299677703),
    LatLng(11.059518173653796, 76.94176803963417),
    LatLng(11.059456794672577, 76.94388399117034),
    LatLng(11.059620471900907, 76.94478040413075),
  ];

  List<LatLng> polyline15 = [
    LatLng(11.065061687338604, 76.90841572331071),
    LatLng(11.065336953204952, 76.90873126349048),
    LatLng(11.065147707949624, 76.90971294404974),
    LatLng(11.065010074959874, 76.91006354424948),
    LatLng(11.065096095586034, 76.9113782949985),
    LatLng(11.065130503829444, 76.91274563577748),
    LatLng(11.065182116186953, 76.91344683617696),
    LatLng(11.064820829476702, 76.91479664695562),
    LatLng(11.065164912052106, 76.9149544170455),
    LatLng(11.065921892295533, 76.91686518813407),
    LatLng(11.066936930920132, 76.91947715963788),
    LatLng(11.067453050903586, 76.92051143022712),
    LatLng(11.0687089391204, 76.92045884021515),
    LatLng(11.069190648219005, 76.92049390023513),
    LatLng(11.070945438949186, 76.92016083004536),
    LatLng(11.071203495522631, 76.9205289602551),
    LatLng(11.072551795914608, 76.92068764258644),
    LatLng(11.072782927824344, 76.92096034554304),
    LatLng(11.073640547263135, 76.9211028948158),
    LatLng(11.073926419851107, 76.92075581832559),
    LatLng(11.076191352785154, 76.92046825944472),
    LatLng(11.077275044834497, 76.92248173486963),
    LatLng(11.07724063801815, 76.92383154563863),
    LatLng(11.07752937663846, 76.9241262390058),
    LatLng(11.0775868482445, 76.9243459742778),
    LatLng(11.078122091621019, 76.92451331472985),
    LatLng(11.078393164699063, 76.92465924241807),
    LatLng(11.078397686529733, 76.92537388794646),
    LatLng(11.07872376547576, 76.92583812562837),
    LatLng(11.078812641963596, 76.92717386248049),
    LatLng(11.079104172688972, 76.92819014459485),
    LatLng(11.078741037881356, 76.92900317028635),
    LatLng(11.078724510029492, 76.92902789028501),
    LatLng(11.078448322675381, 76.92915818286377),
    LatLng(11.078417635176487, 76.930429838439),
    LatLng(11.078172135061601, 76.93108130133282),
    LatLng(11.078180608669557, 76.93290979132614),
    LatLng(11.078336690462248, 76.93369817623264),
    LatLng(11.07854887464883, 76.93386507774164),
    LatLng(11.078799982541806, 76.93505019658002),
    LatLng(11.07886317252539, 76.9362526344106),
    LatLng(11.079026963546154, 76.93713645376505),
    LatLng(11.079336000685963, 76.9378676975398),
    LatLng(11.079388115936482, 76.93839116136346),
    LatLng(11.079284062272555, 76.93881574569414),
    LatLng(11.079053266010568, 76.93911540976711),
    LatLng(11.078971370519012, 76.93943024670453),
    LatLng(11.079193758129, 76.94053360338036),
    LatLng(11.079342658892527, 76.9415008734893),
  ];

  List<LatLng> polyline16 = [
    LatLng(11.059605730378737, 76.94477887153073),
    LatLng(11.060559497858174, 76.94860047816017),
    LatLng(11.060907493327896, 76.94951976497825),
    LatLng(11.060971936888063, 76.95028145977038),
    LatLng(11.061611803312196, 76.95081052755454),
    LatLng(11.062043573870737, 76.95466496587292),
    LatLng(11.061682691059836, 76.95534786465987),
    LatLng(11.06163113633665, 76.95584690608366),
    LatLng(11.061927575864155, 76.95836837849896),
    LatLng(11.064730678394719, 76.95839697456144),
    LatLng(11.067289043524685, 76.95811462217927),
    LatLng(11.068874316514856, 76.95775347378432),
    LatLng(11.069853830464163, 76.957431723398),
    LatLng(11.070266256410067, 76.95737262638828),
    LatLng(11.070865561845286, 76.95740545805899),
    LatLng(11.07122643334425, 76.9570246106619),
    LatLng(11.071477754309724, 76.95648617123494),
    LatLng(11.072302601053696, 76.95583610412442),
    LatLng(11.072740799937332, 76.95553405274134),
    LatLng(11.072824966462079, 76.95584838354858),
    LatLng(11.07399175719108, 76.95650759046117),
    LatLng(11.074765739963361, 76.95757736927912),
    LatLng(11.075033955773655, 76.95847537341855),
    LatLng(11.075447773977903, 76.95855346073517),
    LatLng(11.075876918151637, 76.95861593058804),
    LatLng(11.076207574040184, 76.95959598474758),
    LatLng(11.076682696676109, 76.96053303254025),
    LatLng(11.076950910739173, 76.96119677472952),
    LatLng(11.077157818563458, 76.96129828824174),
    LatLng(11.078744106959528, 76.9607516770294),
    LatLng(11.078912697489594, 76.96077510322424),
    LatLng(11.079142593510436, 76.96090785166153),
    LatLng(11.080123481190432, 76.96232904081874),
    LatLng(11.08076718695204, 76.9638283172964),
    LatLng(11.081096702437213, 76.96485906986835),
    LatLng(11.081924321118887, 76.96658479956514),
    LatLng(11.082591012218685, 76.96683467897651),
    LatLng(11.083194101691143, 76.96826166275174),
    LatLng(11.08353127752233, 76.97070579575674),
  ];

  List<LatLng> polyline17 = [
    LatLng(11.009423734829245, 76.95521108623973),
    LatLng(11.004384860241096, 76.95593223723849),
    LatLng(11.001458003000247, 76.95657274365527),
    LatLng(11.000265571393056, 76.95690404007951),
    LatLng(11.000417335683704, 76.95818505291993),
    LatLng(10.996641198908076, 76.95905931313563),
    LatLng(10.99258684552736, 76.95989859741037),
    LatLng(10.991025796146664, 76.96045075811755),
    LatLng(10.98947693171962, 76.9611762849283),
    LatLng(10.989296791543772, 76.96115676309934),
    LatLng(10.98904680667141, 76.9610795164061),
    LatLng(10.988802983392533, 76.9611378064605),
    LatLng(10.988152148569382, 76.96119389966023),
    LatLng(10.987746488429726, 76.96129604785126),
    LatLng(10.985716428256458, 76.96159642493411),
    LatLng(10.983230043707174, 76.96160613686972),
    LatLng(10.98136539683513, 76.96144048865705),
    LatLng(10.979858493465109, 76.96128588365907),
    LatLng(10.979273075693492, 76.96099876009139),
    LatLng(10.978731021166565, 76.96056807473985),
    LatLng(10.97840578797289, 76.96038034009945),
    LatLng(10.97811307779237, 76.96038034009945),
    LatLng(10.977679432513401, 76.96054598831222),
    LatLng(10.977224104294976, 76.96109814902323),
    LatLng(10.976822981243632, 76.96148466151995),
    LatLng(10.976345969355696, 76.96179387151592),
    LatLng(10.97583643305471, 76.96192639008761),
    LatLng(10.974578850398279, 76.96184908758862),
    LatLng(10.973838421605427, 76.9632062260601),
    LatLng(10.973271149857242, 76.9644932276054),
    LatLng(10.972935124001907, 76.96500456712104),
    LatLng(10.971516938229083, 76.96600264995801),
    LatLng(10.970949662024637, 76.96651482404236),
    LatLng(10.969054435857583, 76.9675917028963),
    LatLng(10.967868301761687, 76.96815640765597),
    LatLng(10.966282484580862, 76.96906256180843),
    LatLng(10.965483126346166, 76.96965353191183),
    LatLng(10.964812695190133, 76.97007377731859),
    LatLng(10.963949453271532, 76.97064910310412),
    LatLng(10.962047522044854, 76.97152522438621),
    LatLng(10.960848466733294, 76.97128227001207),
    LatLng(10.959185252931144, 76.971695949081),
    LatLng(10.956774220969328, 76.97226065384329),
    LatLng(10.95604575020204, 76.97251674088896),
    LatLng(10.953937687610695, 76.9740138651422),
    LatLng(10.951313870071884, 76.97584587245161),
    LatLng(10.949212220576308, 76.9771066086648),
    LatLng(10.94842774813629, 76.97754807464422),
    LatLng(10.944917070727136, 76.97869773098115),
    LatLng(10.942435006184237, 76.9793871960972),
    LatLng(10.935424505001757, 76.98044446089416),
    LatLng(10.932484612613566, 76.98018180752129),
    LatLng(10.931994627731273, 76.98020807285896),
    LatLng(10.929699424552512, 76.9807859102913),
    LatLng(10.925573172051886, 76.98217797318725),
    LatLng(10.923871076061715, 76.98265074927183),
  ];

  List<LatLng> polyline18 = [
    LatLng(10.997090419775633, 76.99578469631263),
    LatLng(10.99740876472082, 76.99361778074146),
    LatLng(10.997828400710109, 76.99099389656791),
    LatLng(10.998088864150905, 76.98929869048698),
    LatLng(10.997900751704234, 76.98657161987019),
    LatLng(10.997915221890828, 76.98555449622714),
    LatLng(10.998175685233777, 76.98531864147108),
    LatLng(10.997003598360383, 76.98502382301982),
    LatLng(10.996323496443894, 76.98486167287504),
    LatLng(10.995484219557605, 76.98422781321187),
    LatLng(10.994601529210092, 76.98338758063555),
    LatLng(10.993878010562272, 76.98263579359308),
    LatLng(10.99261908391488, 76.98083740107494),
    LatLng(10.992430967969725, 76.98014457772415),
    LatLng(10.991938971868922, 76.97830196243473),
    LatLng(10.991812255318141, 76.97656452818002),
    LatLng(10.991207397968475, 76.9753119158974),
    LatLng(10.990583232868515, 76.97347739642137),
    LatLng(10.990296730402427, 76.97111128322818),
    LatLng(10.989912153559088, 76.96898425326695),
    LatLng(10.988647143903938, 76.96598593335123),
    LatLng(10.988033424388473, 76.96394452403862),
    LatLng(10.987720301683341, 76.96138000359703),
    LatLng(10.987732826597249, 76.96129069194019),
    LatLng(10.988759867728197, 76.96112482743465),
    LatLng(10.988960265580847, 76.96086965127226),
    LatLng(10.988559469739448, 76.95900686528685),
    LatLng(10.988020899454767, 76.95762891399015),
    LatLng(10.987256879479721, 76.95646786245129),
    LatLng(10.986568007296468, 76.95502611711998),
    LatLng(10.985741358558034, 76.95325264277515),
    LatLng(10.985302983297132, 76.95117295705172),
    LatLng(10.985115107974602, 76.94877430111258),
    LatLng(10.985065007871714, 76.94683496226708),
    LatLng(10.985440758438163, 76.94633736875043),
    LatLng(10.985879133494437, 76.94595460450685),
    LatLng(10.985806132480633, 76.94603334642098),
    LatLng(10.986275289342306, 76.94604768388045),
    LatLng(10.987185451562462, 76.94604290472692),
    LatLng(10.988137834790406, 76.94622929169967),
    LatLng(10.989883080752591, 76.94636310798808),
    LatLng(10.989686037371703, 76.9449293620315),
    LatLng(10.98949368537186, 76.94417425583265),
    LatLng(10.989188736822449, 76.94376324866113),
    LatLng(10.988846255767074, 76.94291255939461),
    LatLng(10.98864452016548, 76.94228649033101),
    LatLng(10.988433401364707, 76.94147403428711),
    LatLng(10.988039312527661, 76.9402362336157),
    LatLng(10.987817861873246, 76.93800570361282),
    LatLng(10.988028504846294, 76.93688454024466),
    LatLng(10.988273345808562, 76.93573865345564),
    LatLng(10.987989939747859, 76.93499886259688),
    LatLng(10.987361131578771, 76.93430418093682),
    LatLng(10.985811305935473, 76.933382540066),
    LatLng(10.985102784349326, 76.93290438255683),
    LatLng(10.98468652713223, 76.93240818137109),
    LatLng(10.983898293754615, 76.9303331582215),
    LatLng(10.983827441208525, 76.9283393316323),
    LatLng(10.983871724048354, 76.92638159239834),
    LatLng(10.984022285652845, 76.92524484057863),
    LatLng(10.983916006879864, 76.92362090941879),
    LatLng(10.983340329529286, 76.92222252425348),
    LatLng(10.98299492256805, 76.92164512650419),
    LatLng(10.982640658614326, 76.92137447131196),
    LatLng(10.98196824885077, 76.92144631524263),
    LatLng(10.981613983665154, 76.92153653364005),
    LatLng(10.980648608877104, 76.92115761637093),
    LatLng(10.980046355117157, 76.92087793933896),
    LatLng(10.979204969103892, 76.91954270705025),
    LatLng(10.978886127472384, 76.91917281162087),
    LatLng(10.977796749275115, 76.91845106443628),
    LatLng(10.977032180840613, 76.91793367228036),
    LatLng(10.97628821102569, 76.91627365376802),
    LatLng(10.975588523405628, 76.91506472723665),
    LatLng(10.974596558374017, 76.91283633281493),
    LatLng(10.972898827985546, 76.91282410330597),
    LatLng(10.971609568258247, 76.91254831724345),
    LatLng(10.971274359807884, 76.91215433715415),
    LatLng(10.970139805308756, 76.90954093589507),
    LatLng(10.969237315642015, 76.90746597407464),
    LatLng(10.968489536407755, 76.90561426764745),
    LatLng(10.96781004150238, 76.90382585812948),
    LatLng(10.96762770984156, 76.90282294855125),
    LatLng(10.96789209071871, 76.90137430138213),
    LatLng(10.968657882245273, 76.89934990982162),
    LatLng(10.969628613412333, 76.89734563703226),
    LatLng(10.970376389751076, 76.8964526154965),
    LatLng(10.970866311154179, 76.89521814455001),
    LatLng(10.971009617557552, 76.89265824563117),
    LatLng(10.971035402855621, 76.88899423078534),
    LatLng(10.97112565139494, 76.8883507299728),
    LatLng(10.971215899918787, 76.88476551113841),
    LatLng(10.971873423986214, 76.88311079475113),
    LatLng(10.972414913273296, 76.87936798390271),
  ];

  List<LatLng> polyline19 = [
    LatLng(10.970837623909802, 76.91105226044996),
    LatLng(10.97032400006, 76.91148954944698),
    LatLng(10.970277655977718, 76.91213616714057),
    LatLng(10.970213192553205, 76.91223794533032),
    LatLng(10.970026248542672, 76.91217556514951),
    LatLng(10.969354003335365, 76.91193784550065),
    LatLng(10.9689644405689, 76.91191605704137),
    LatLng(10.968145909227506, 76.9120817052644),
    LatLng(10.967620096509972, 76.91239091528028),
    LatLng(10.96750626064571, 76.91283816548072),
    LatLng(10.96735990018437, 76.91309768102914),
    LatLng(10.967143069729342, 76.9131528971034),
    LatLng(10.965720040225648, 76.91361175594537),
    LatLng(10.964722613324717, 76.91415287347183),
    LatLng(10.96360592486811, 76.9143406081239),
    LatLng(10.962313381264428, 76.91505407692703),
    LatLng(10.961451464577177, 76.9155091160086),
    LatLng(10.96128242145427, 76.91555240883649),
    LatLng(10.960528018284316, 76.91544245449664),
    LatLng(10.960458614783484, 76.9170949742832),
    LatLng(10.960716476903004, 76.91754148505109),
    LatLng(10.960768049299935, 76.91777787310468),
    LatLng(10.960729370002335, 76.91850016994186),
    LatLng(10.960523080333687, 76.91913053808476),
    LatLng(10.9603167905212, 76.91956391618298),
    LatLng(10.960020248660747, 76.92016801898896),
    LatLng(10.959949788928238, 76.9206402719779),
    LatLng(10.959949788928238, 76.9208942659189),
    LatLng(10.959158105933675, 76.92310551691327),
    LatLng(10.958556630361812, 76.92312108564575),
    LatLng(10.957531591694313, 76.92320390667737),
    LatLng(10.957314921145155, 76.92466126342326),
    LatLng(10.956046319610588, 76.92631454614605),
    LatLng(10.95479502663423, 76.9264511019346),
    LatLng(10.954616270013737, 76.92657248488047),
    LatLng(10.954660959166691, 76.92828701867003),
    LatLng(10.954765233830646, 76.92874220463185),
    LatLng(10.954243860143512, 76.92980430520944),
    LatLng(10.952411596719356, 76.93182229631697),
    LatLng(10.951845529315989, 76.9325505938559),
    LatLng(10.951502909046104, 76.9330057798177),
    LatLng(10.949491869001598, 76.93465962215507),
    LatLng(10.947104496146599, 76.93646926512201),
    LatLng(10.945704197084055, 76.93774378581512),
    LatLng(10.944974251316037, 76.93850242908822),
    LatLng(10.944452860382636, 76.93935210955307),
    LatLng(10.943737808452267, 76.94021696288925),
    LatLng(10.942471566461808, 76.9419314966844),
    LatLng(10.94202465622556, 76.9424928927093),
    LatLng(10.940966965995228, 76.94313015305723),
    LatLng(10.939924169128131, 76.9434791289613),
    LatLng(10.939626226455243, 76.94551229293653),
    LatLng(10.939326931496302, 76.94794012565062),
    LatLng(10.93888222392853, 76.94813150777685),
    LatLng(10.937855009587361, 76.94838668393922),
    LatLng(10.937247448195457, 76.94913307421723),
    LatLng(10.937037619997973, 76.9495030796573),
    LatLng(10.936660789757433, 76.95105605009186),
    LatLng(10.934809778800824, 76.9503780006878),
    LatLng(10.93284697843302, 76.94977586513407),
    LatLng(10.930576735387442, 76.94965543802496),
  ];

  List<LatLng> polyline20 = [
    LatLng(10.962924974186155, 76.95011996827809),
    LatLng(10.962929559960667, 76.9500337808098),
    LatLng(10.963226275841938, 76.94998416069123),
    LatLng(10.96365584905307, 76.95039465439943),
    LatLng(10.963846278215113, 76.95074650614933),
    LatLng(10.963952564205728, 76.9510261831813),
    LatLng(10.96408542164028, 76.9514998297677),
    LatLng(10.96392436337855, 76.95155334809395),
    LatLng(10.963769001531702, 76.9518081579492),
    LatLng(10.96372423623865, 76.95195567944434),
    LatLng(10.963742669006045, 76.95222658255601),
    LatLng(10.963726869490209, 76.9525189433373),
    LatLng(10.963753202015981, 76.95266378262572),
    LatLng(10.963769001530403, 76.95285690167391),
    LatLng(10.963797967304647, 76.95309025385714),
    LatLng(10.963834832832365, 76.95321095326331),
    LatLng(10.963776901287595, 76.95356232264407),
    LatLng(10.963661038162831, 76.953996840505),
    LatLng(10.96355570800888, 76.95434016326078),
    LatLng(10.963508309428896, 76.95471567252115),
    LatLng(10.963482972905528, 76.955046236021),
    LatLng(10.96441331277936, 76.95522613529819),
    LatLng(10.966611345872002, 76.95563203400593),
    LatLng(10.969799318580883, 76.9560882079581),
    LatLng(10.970356678607727, 76.95626393527797),
    LatLng(10.97290459682504, 76.95899446748913),
    LatLng(10.973647735485647, 76.95939999207346),
    LatLng(10.974731499961273, 76.96172970144124),
  ];

  List<LatLng> polyline21 = [
    LatLng(10.971797020214638, 76.96575225042001),
    LatLng(10.970502081985952, 76.9697858556072),
    LatLng(10.969132068691643, 76.97402974353808),
    LatLng(10.968066641238899, 76.97741110008597),
    LatLng(10.965024710403146, 76.98662039139141),
    LatLng(10.964705660876653, 76.98761445522759),
    LatLng(10.96333562076229, 76.98715565653397),
    LatLng(10.96067059300153, 76.98619982591909),
    LatLng(10.958437206215024, 76.98543516142972),
    LatLng(10.95809938153581, 76.98535869498079),
    LatLng(10.957799092608292, 76.98545427804196),
    LatLng(10.957399131580605, 76.98572091151622),
    LatLng(10.957171451941111, 76.98619576975375),
    LatLng(10.956120212634234, 76.98890691918317),
    LatLng(10.955166106798142, 76.99129706507725),
    LatLng(10.954202612560131, 76.9928422136754),
    LatLng(10.953482617733279, 76.99347366910581),
    LatLng(10.952752156794105, 76.99434241953351),
    LatLng(10.951801571192473, 76.99574244882434),
    LatLng(10.950963493226194, 76.99721330783234),
    LatLng(10.949854647962358, 76.99999743380931),
    LatLng(10.948740745052477, 77.0031415758089),
    LatLng(10.948204464049624, 77.00420367638651),
    LatLng(10.947057415301524, 77.00694996503226),
  ];

  List<LatLng> polyline22 = [
    LatLng(10.985900451512853, 76.94581589849741),
    LatLng(10.984895412688326, 76.9448800418448),
    LatLng(10.983012640775925, 76.94308721584987),
    LatLng(10.982541945876301, 76.94244096460193),
    LatLng(10.981919102385499, 76.9420720504501),
    LatLng(10.981601893891266, 76.94189485253199),
    LatLng(10.981243754859179, 76.94189485253199),
    LatLng(10.98083445255823, 76.94186358230807),
    LatLng(10.980410891650664, 76.94163965875353),
    LatLng(10.979585383988931, 76.9401347049852),
    LatLng(10.979447908572853, 76.93998361051624),
    LatLng(10.978037171734256, 76.93903971914949),
    LatLng(10.977124513821732, 76.93874222499657),
    LatLng(10.976501391948785, 76.9385364711396),
    LatLng(10.975637404704266, 76.93797866960291),
    LatLng(10.975515716156966, 76.93794148283379),
    LatLng(10.974469192581113, 76.9379662740132),
    LatLng(10.973763395518386, 76.93372698233438),
    LatLng(10.972935269924854, 76.93378938883086),
    LatLng(10.97092738412431, 76.9318184900679),
    LatLng(10.97036760744828, 76.9309631943701),
    LatLng(10.969102021478186, 76.93101277672729),
    LatLng(10.967080458165706, 76.93100350656056),
    LatLng(10.964561422093954, 76.93082996830469),
    LatLng(10.962560455970783, 76.93105822808266),
    LatLng(10.961987448545559, 76.93119987601729),
    LatLng(10.959707393881207, 76.9310858815669),
    LatLng(10.958427419794932, 76.93083250025485),
    LatLng(10.957736547270496, 76.93094076233174),
    LatLng(10.956886240410858, 76.93078739105616),
    LatLng(10.955734779286246, 76.9303814082632),
    LatLng(10.95429987533873, 76.92980401051979),
  ];

  MarkerId? selectedMarker;
  PolygonId? selectedPolygon;

  @override
  void initState() {
    super.initState();
    addCustomIconTank();
    addCustomIconTap();
    DefaultAssetBundle.of(context)
        .loadString("assets/map_theme/dark_map.json")
        .then((value) {
      mapTheme = value;
    });
  }

  Future<void> addCustomIconTank() async {
    markerIcon1 = await BitmapDescriptor.fromAssetImage(
      ImageConfiguration(devicePixelRatio: 2.5),
      "assets/map_theme/water_tank.png",
    );
    setState(() {});
  }

  Future<void> addCustomIconTap() async {
    markerIcon2 = await BitmapDescriptor.fromAssetImage(
      ImageConfiguration(devicePixelRatio: 2.5),
      "assets/login_screen/water_tap.png",
    );
    setState(() {});
  }

  void _showSpecifiedCoordinates() async {
    GoogleMapController controller = await _controller.future;

    controller.animateCamera(
      CameraUpdate.newLatLngZoom(
        LatLng(11.017638730275939, 76.95911594996261),
        11.0,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GoogleMap(
        polylines: {
          Polyline(
            polylineId: PolylineId('polyline1'),
            color: Colors.red,
            points: polyline1,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline2'),
            color: Colors.red,
            points: polyline2,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline3'),
            color: Colors.red,
            points: polyline3,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline4'),
            color: Colors.red,
            points: polyline4,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline5'),
            color: Colors.red,
            points: polyline5,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline6'),
            color: Colors.red,
            points: polyline6,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline7'),
            color: Colors.yellow,
            points: polyline7,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline8'),
            color: Colors.red,
            points: polyline8,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline9'),
            color: Colors.red,
            points: polyline9,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline10'),
            color: Colors.green,
            points: polyline10,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline11'),
            color: Colors.green,
            points: polyline11,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline12'),
            color: Colors.green,
            points: polyline12,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline13'),
            color: Colors.green,
            points: polyline13,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline14'),
            color: Colors.green,
            points: polyline14,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline15'),
            color: Colors.green,
            points: polyline15,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline16'),
            color: Colors.green,
            points: polyline16,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline17'),
            color: Colors.cyan.shade300,
            points: polyline17,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline18'),
            color: Colors.cyan.shade300,
            points: polyline18,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline19'),
            color: Colors.cyan.shade300,
            points: polyline19,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline20'),
            color: Colors.cyan.shade300,
            points: polyline20,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline21'),
            color: Colors.cyan.shade300,
            points: polyline21,
            width: 2,
          ),
          Polyline(
            polylineId: PolylineId('polyline22'),
            color: Colors.cyan.shade300,
            points: polyline22,
            width: 2,
          ),
        },
        zoomControlsEnabled: false,
        myLocationEnabled: true,
        myLocationButtonEnabled: true,
        onMapCreated: (GoogleMapController controller) {
          controller.setMapStyle(mapTheme);
          _controller.complete(controller);
        },
        markers: {
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.050414532590901, 77.01419564157277),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.050414532590901, 77.01419564157277),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.015051465373368, 76.98429907505565),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.015051465373368, 76.98429907505565),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.0347063990166, 76.97840587803472),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.0347063990166, 76.97840587803472),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.045183804232039, 76.92654349006604),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.045183804232039, 76.92654349006604),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.063323745299769, 76.92545621142547),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.063323745299769, 76.92545621142547),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(11.035344503562364, 76.9506488679211),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.035344503562364, 76.9506488679211),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(10.998175685233777, 76.98531864147108),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(10.998175685233777, 76.98531864147108),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(10.97290459682504, 76.95899446748913),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(10.97290459682504, 76.95899446748913),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(10.964705660876653, 76.98761445522759),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(10.964705660876653, 76.98761445522759),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Tap"),
            position: const LatLng(10.985900451512853, 76.94581589849741),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon2,
            onTap: () async {
              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(10.985900451512853, 76.94581589849741),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Peelamedu Water Tank"),
            position: const LatLng(11.032124056025587, 76.99865509563396),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon1,
            onTap: () async {
              _showHistoryPopup3(context, widget.email);

              print("Marker Tapped: Water Tank 1");
              setState(() {
                if (selectedMarker == MarkerId("Peelamedu Water Tank")) {
                  selectedPolygon = null;
                  selectedMarker = null;
                } else {
                  selectedPolygon = PolygonId("1");
                  selectedMarker = MarkerId("Peelamedu Water Tank");
                }
              });

              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.032124056025587, 76.99865509563396),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Sabari Garden Water Tank"),
            position: const LatLng(11.04745670520816, 76.92919087637374),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon1,
            onTap: () async {
              _showHistoryPopup2(context);

              print("Marker Tapped: Water Tank 2");
              setState(() {
                if (selectedMarker == MarkerId("Sabari Garden Water Tank")) {
                  selectedPolygon = null;
                  selectedMarker = null;
                } else {
                  selectedPolygon = PolygonId("2");
                  selectedMarker = MarkerId("Sabari Garden Water Tank");
                }
              });

              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(11.04745670520816, 76.92919087637374),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
          Marker(
            markerId: const MarkerId("Ghandipark Water Tank"),
            position: const LatLng(10.962924974186155, 76.95011996827809),
            draggable: false,
            onDragEnd: (value) {},
            icon: markerIcon1,
            onTap: () async {
              _showHistoryPopup1(context);

              print("Marker Tapped: Water Tank 3");
              setState(() {
                if (selectedMarker == MarkerId("Ghandipark Water Tank")) {
                  selectedPolygon = null;
                  selectedMarker = null;
                } else {
                  selectedPolygon = PolygonId("3");
                  selectedMarker = MarkerId("Ghandipark Water Tank");
                }
              });

              GoogleMapController controller = await _controller.future;

              controller.animateCamera(
                CameraUpdate.newLatLng(
                  LatLng(10.962924974186155, 76.95011996827809),
                ),
              );
            },
            consumeTapEvents: true,
            infoWindow: InfoWindow(
              title: '',
              snippet: '',
            ),
          ),
        },
        initialCameraPosition: const CameraPosition(
          target: LatLng(11.017638730275939, 76.95911594996261),
          zoom: 11,
        ),
        polygons: {
          if (selectedPolygon == PolygonId("1"))
            Polygon(
              polygonId: PolygonId("1"),
              points: peelamedu,
              fillColor: Colors.blue.withOpacity(0.3),
              strokeColor: Colors.blue.shade50,
              strokeWidth: 2,
            ),
          if (selectedPolygon == PolygonId("2"))
            Polygon(
              polygonId: PolygonId("2"),
              points: sabariGarden,
              fillColor: Colors.blue.withOpacity(0.3),
              strokeColor: Colors.blue.shade50,
              strokeWidth: 2,
            ),
          if (selectedPolygon == PolygonId("3"))
            Polygon(
              polygonId: PolygonId("3"),
              points: ghandipark,
              fillColor: Colors.blue.withOpacity(0.3),
              strokeColor: Colors.blue.shade50,
              strokeWidth: 2,
            ),
        },
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endDocked,
      floatingActionButton: Container(
        margin: EdgeInsets.only(bottom: 80.0),
        child: FloatingActionButton(
          onPressed: () {
            _showHistoryPopup4(context);
          },
          tooltip: 'Show Coordinates',
          child: Icon(
            Icons.gps_fixed,
            color: Theme.of(context).iconTheme.color,
          ),
          backgroundColor: Colors.black54,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30.0),
          ),
        ),
      ),
    );
  }
}

void _showHistoryPopup1(BuildContext context) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        backgroundColor: Color(0xFF012C3F),
        title: Text(
          "Ghandipark Services",
          style: TextStyle(
            fontWeight: FontWeight.w500,
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        content: Container(
          width: 800,
          height: 260,
          child: SingleChildScrollView(
            child: Column(
              children: [
                SizedBox(
                  height: 10,
                ),
                Container(
                  child: Row(
                    children: [
                      SizedBox(
                        width: 10,
                      ),
                      CircleAvatar(
                        radius: 24,
                        backgroundImage:
                            AssetImage("assets/login_screen/plumber_crop.png"),
                      ),
                      SizedBox(width: 10),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("  Name : Kumaresan.G",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                          Text("  Phone No : 9341653427",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                        ],
                      ),
                      SizedBox(width: 16),
                    ],
                  ),
                  width: 270,
                  height: 70,
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: Colors.white,
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(10.0),
                    color: Colors.blue.shade900,
                  ),
                ),
                SizedBox(
                  height: 10,
                ),
                Container(
                  child: Row(
                    children: [
                      SizedBox(
                        width: 10,
                      ),
                      CircleAvatar(
                        radius: 24,
                        backgroundImage:
                            AssetImage("assets/login_screen/plumber_crop.png"),
                      ),
                      SizedBox(width: 10),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("  Name : Maaran.E",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                          Text("  Phone No : 8965423161",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                        ],
                      ),
                      SizedBox(width: 16),
                    ],
                  ),
                  width: 270,
                  height: 70,
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: Colors.white,
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(10.0),
                    color: Colors.blue.shade900,
                  ),
                ),
                SizedBox(
                  height: 10,
                ),
                Container(
                  child: Row(
                    children: [
                      SizedBox(
                        width: 10,
                      ),
                      CircleAvatar(
                        radius: 24,
                        backgroundImage:
                            AssetImage("assets/login_screen/plumber_crop.png"),
                      ),
                      SizedBox(width: 10),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("  Name : Eashwar.R",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                          Text("  Phone No : 8754325162",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                        ],
                      ),
                      SizedBox(width: 16),
                    ],
                  ),
                  width: 270,
                  height: 90,
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: Colors.white,
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(10.0),
                    color: Colors.blue.shade900,
                  ),
                ),
              ],
            ),
          ),
        ),
        contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 20),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(
              "Close",
              style: TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 16,
                color: Colors.white,
              ),
            ),
          ),
        ],
      );
    },
  );
}

void _showHistoryPopup2(BuildContext context) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        backgroundColor: Color(0xFF012C3F),
        title: Text(
          "Sabari Garden Services",
          style: TextStyle(
            fontWeight: FontWeight.w500,
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        content: Container(
          width: 800,
          height: 170,
          child: SingleChildScrollView(
            child: Column(
              children: [
                Container(
                  child: Row(
                    children: [
                      SizedBox(
                        width: 10,
                      ),
                      CircleAvatar(
                        radius: 24,
                        backgroundImage:
                            AssetImage("assets/login_screen/plumber_crop.png"),
                      ),
                      SizedBox(width: 10),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("  Name : Mathivadanan.R",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                          Text("  Phone No : 9752341623",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                        ],
                      ),
                      SizedBox(width: 16),
                    ],
                  ),
                  width: 270,
                  height: 70,
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: Colors.white,
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(10.0),
                    color: Colors.blue.shade900,
                  ),
                ),
                SizedBox(
                  height: 10,
                ),
                Container(
                  child: Row(
                    children: [
                      SizedBox(
                        width: 10,
                      ),
                      CircleAvatar(
                        radius: 24,
                        backgroundImage:
                            AssetImage("assets/login_screen/plumber_crop.png"),
                      ),
                      SizedBox(width: 10),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text("  Name : Ramesh Kumar.N",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                          Text("  Phone No : 8523145326",
                              style: TextStyle(
                                fontWeight: FontWeight.w900,
                                fontSize: 14,
                                color: Colors.white,
                              )),
                        ],
                      ),
                      SizedBox(width: 16),
                    ],
                  ),
                  width: 270,
                  height: 70,
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: Colors.white,
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(10.0),
                    color: Colors.blue.shade900,
                  ),
                ),
              ],
            ),
          ),
        ),
        contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 20),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(
              "Close",
              style: TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 16,
                color: Colors.white,
              ),
            ),
          ),
        ],
      );
    },
  );
}

void _showHistoryPopup3(BuildContext context, String email) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        backgroundColor: Color(0xFF012C3F),
        title: Text(
          "Peelamedu Services",
          style: TextStyle(
            fontWeight: FontWeight.w500,
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        content: Container(
          width: 800,
          height: 250,
          child: PageView(
            children: [
              SingleChildScrollView(
                child: Container(
                  child: Column(
                    children: [
                      Row(children: [
                        Text(
                          "  Velocity : 21 m/s",
                          style: TextStyle(
                              fontWeight: FontWeight.w700, fontSize: 24),
                        )
                      ]),
                      Row(children: [
                        Text(
                          "  Volume : 70%",
                          style: TextStyle(
                              fontWeight: FontWeight.w700, fontSize: 24),
                        )
                      ]),
                      Row(children: [
                        Text(
                          "  Toxins : Nil",
                          style: TextStyle(
                              fontWeight: FontWeight.w700, fontSize: 24),
                        )
                      ]),
                    ],
                  ),
                ),
              ),
              SingleChildScrollView(
                child: Column(
                  children: [
                    InkWell(
                      onTap: () async {
                        Uri phoneno = Uri.parse('tel:+97798345348734');
                        if (await launchUrl(phoneno)) {
                          print("opened dialpad");
                        } else {
                          print("error occured");
                        }
                      },
                      child: Container(
                        child: Row(
                          children: [
                            SizedBox(
                              width: 10,
                            ),
                            CircleAvatar(
                              radius: 24,
                              backgroundImage: AssetImage(
                                  "assets/login_screen/plumber_crop.png"),
                            ),
                            SizedBox(width: 10),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Text("  Name : Ravikumar.R",
                                    style: TextStyle(
                                      fontWeight: FontWeight.w900,
                                      fontSize: 14,
                                      color: Colors.white,
                                    )),
                                Text("  Phone No : 9225172583",
                                    style: TextStyle(
                                      fontWeight: FontWeight.w900,
                                      fontSize: 14,
                                      color: Colors.white,
                                    )),
                              ],
                            ),
                          ],
                        ),
                        width: 270,
                        height: 70,
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: Colors.white,
                            width: 2.0,
                          ),
                          borderRadius: BorderRadius.circular(10.0),
                          color: Colors.blue.shade900,
                        ),
                      ),
                    ),
                    SizedBox(
                      height: 10,
                    ),
                    Container(
                      child: Row(
                        children: [
                          SizedBox(
                            width: 10,
                          ),
                          CircleAvatar(
                            radius: 24,
                            backgroundImage: AssetImage(
                                "assets/login_screen/plumber_crop.png"),
                          ),
                          SizedBox(width: 10),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text("  Name : Kathiravan.M",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                              Text("  Phone No : 9637893415",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                            ],
                          ),
                          SizedBox(width: 16),
                        ],
                      ),
                      width: 270,
                      height: 70,
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: Colors.white,
                          width: 2.0,
                        ),
                        borderRadius: BorderRadius.circular(10.0),
                        color: Colors.blue.shade900,
                      ),
                    ),
                    SizedBox(
                      height: 10,
                    ),
                    Container(
                      child: Row(
                        children: [
                          SizedBox(
                            width: 10,
                          ),
                          CircleAvatar(
                            radius: 24,
                            backgroundImage: AssetImage(
                                "assets/login_screen/plumber_crop.png"),
                          ),
                          SizedBox(width: 10),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text("  Name : Manikandan.S",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                              Text("  Phone No : 8378948273",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                            ],
                          ),
                          SizedBox(width: 16),
                        ],
                      ),
                      width: 270,
                      height: 70,
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: Colors.white,
                          width: 2.0,
                        ),
                        borderRadius: BorderRadius.circular(10.0),
                        color: Colors.blue.shade900,
                      ),
                    ),
                    SizedBox(
                      height: 10,
                    ),
                    Container(
                      child: Row(
                        children: [
                          SizedBox(
                            width: 10,
                          ),
                          CircleAvatar(
                            radius: 24,
                            backgroundImage: AssetImage(
                                "assets/login_screen/plumber_crop.png"),
                          ),
                          SizedBox(width: 10),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text("  Name : Arulmozhi.D",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                              Text("  Phone No : 9254627183",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w900,
                                    fontSize: 14,
                                    color: Colors.white,
                                  )),
                            ],
                          ),
                          SizedBox(width: 16),
                        ],
                      ),
                      width: 270,
                      height: 70,
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: Colors.white,
                          width: 2.0,
                        ),
                        borderRadius: BorderRadius.circular(10.0),
                        color: Colors.blue.shade900,
                      ),
                    ),
                  ],
                ),
              ),
              SingleChildScrollView(
                child: Column(
                  children: [
                    Row(children: [
                      Text(
                        "  Raise your complaint:",
                        style: TextStyle(
                            fontWeight: FontWeight.w500, fontSize: 16),
                      )
                    ]),
                    SizedBox(
                      height: 10,
                    ),
                    Stack(
                      alignment: Alignment.bottomLeft,
                      children: [
                        SizedBox(
                          height: 65,
                          child: Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: TextFormField(
                              cursorOpacityAnimates: true,
                              controller: _queryController,
                              decoration: InputDecoration(
                                contentPadding:
                                    EdgeInsets.symmetric(vertical: 24),
                                prefixIcon: Icon(Iconsax.direct_copy),
                                labelStyle:
                                    TextStyle(fontWeight: FontWeight.w600),
                                border: OutlineInputBorder(
                                  borderSide: BorderSide(
                                      color: Colors.grey, width: 1.0),
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                      color: Colors.grey, width: 1.0),
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                      color: Colors.blue.shade900, width: 2.0),
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                errorBorder: InputBorder.none,
                                disabledBorder: InputBorder.none,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(
                      height: 70,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        ElevatedButton(
                          onPressed: () async {
                            if (_queryController.text.isNotEmpty) {
                              uploadCollection(email);
                              sendMail(
                                email,
                                "Acknowledgement of Pipeline Burst Complaint",
                                """We've received your complaint about the pipeline burst and are actively addressing the issue. Our team is working to resolve it swiftly, and we'll keep you updated on the progress.""",
                              );
                              snackBar1("Complaint raised successfully");
                              Navigator.of(context).pop();
                            } else {
                              // Show a Snackbar or handle the case where the text field is empty
                              snackBar("Please provide a valid input");
                            }
                          },
                          child: Text("Submit"),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue.shade900,
                            elevation: 2,
                            padding: EdgeInsets.symmetric(
                                vertical: 16, horizontal: 30),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              )
            ],
          ),
        ),
        contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 20),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(
              "Close",
              style: TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 16,
                color: Colors.white,
              ),
            ),
          ),
        ],
      );
    },
  );
}

final TextEditingController _queryController = TextEditingController();

void snackBar(String? errorMessage) {
  Get.snackbar(
    'Error',
    '$errorMessage',
    snackPosition: SnackPosition.BOTTOM,
    margin: EdgeInsets.only(bottom: 10, left: 10, right: 10),
  );
}

void uploadCollection(String email) async {
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  CollectionReference collection = firestore.collection('Complaints');

  DocumentReference document = collection.doc(generateRandomSixDigitNumber());

  DateTime currentDateTime = DateTime.now();

  String formattedDate =
      "${currentDateTime.year}-${currentDateTime.month}-${currentDateTime.day}";
  String formattedTime =
      "${currentDateTime.hour}:${currentDateTime.minute}:${currentDateTime.second}";

  Map<String, dynamic> data = {
    'Date': formattedDate,
    'Time': formattedTime,
    'Complaint': _queryController.text.trim(),
    'E-Mail': email,
  };

  await document.set(data);

  print('Collection uploaded successfully!');
}

String generateRandomSixDigitNumber() {
  Random random = Random();
  int randomNumber = random.nextInt(900000) + 100000;

  return randomNumber.toString();
}

void sendMail(String receiverEmail, String title, String description) async {
  String technicianname = "waterauthoritycoimbatore@gmail.com";
  String password = "eeka ipln xcsy vvaf";
  final smtpServer = gmail(technicianname, password);

  final message = Message()
    ..from = Address(technicianname, 'Water Authority')
    ..recipients.add(receiverEmail)
    ..subject = title
    ..text = description.replaceAll('[recipient email]', receiverEmail);
  try {
    await send(message, smtpServer);
  } catch (e) {
    print('Error occurred: $e');
  }
}

void snackBar1(String? errorMessage) {
  Get.snackbar(
    'Success',
    '$errorMessage',
    snackPosition: SnackPosition.BOTTOM,
    margin: EdgeInsets.only(bottom: 10, left: 10, right: 10),
  );
}

class BumpClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    Path path = Path();
    path.moveTo(0, 0);
    path.lineTo(size.width - 20, 0);
    path.lineTo(size.width, 20);
    path.lineTo(size.width, size.height);
    path.lineTo(0, size.height);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) {
    return false;
  }
}
